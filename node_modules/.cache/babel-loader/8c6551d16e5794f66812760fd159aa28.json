{"ast":null,"code":"const URL = \"http://localhost:8080/CA2_Fall_Backend/\";\n\nfunction handleHttpErrors(res) {\n  if (!res.ok) {\n    return Promise.reject({\n      status: res.status,\n      fullError: res.json()\n    });\n  }\n\n  return res.json();\n}\n\nlet apiFacade = () => {\n  const fetchData = (endpoint, updateAction, SetErrorMessage) => {\n    const options = makeOptions(\"GET\", true); //True add's the token\n\n    return fetch(URL + \"/api/\" + endpoint, options).then(handleHttpErrors).then(data => updateAction(data)).catch(err => {\n      if (err.status) {\n        console.log(err);\n        err.fullError.then(e => SetErrorMessage(e.code + \": \" + e.message));\n      } else {\n        SetErrorMessage(\"Network error\");\n      }\n    });\n  };\n\n  const login = (user, password, setLoggedIn, setErrorMessage) => {\n    const options = makeOptions(\"POST\", true, {\n      username: user,\n      password: password\n    });\n    return fetch(URL + \"/api/login\", options).then(handleHttpErrors).then(res => {\n      setToken(res.token);\n      setLoggedIn(true);\n      setErrorMessage('Logged in');\n    }).catch(err => {\n      if (err.status) {\n        err.fullError.then(e => setErrorMessage(e.code + ': ' + e.message));\n      } else {\n        setErrorMessage('Network error');\n      }\n    });\n  }; // Security funktionalitet\n\n\n  const setToken = token => {\n    localStorage.setItem('jwtToken', token);\n  };\n\n  const getToken = () => {\n    return localStorage.getItem('jwtToken');\n  };\n\n  const loggedIn = () => {\n    const loggedIn = getToken() != null;\n    return loggedIn;\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"jwtToken\");\n  };\n\n  const getUserRoles = () => {\n    const token = getToken();\n\n    if (token != null) {\n      const payloadBase64 = getToken().split('.')[1];\n      const decodedClaims = JSON.parse(window.atob(payloadBase64));\n      const roles = decodedClaims.roles;\n      return roles;\n    } else return \"\";\n  };\n\n  const hasUserAccess = (neededRole, loggedIn) => {\n    const roles = getUserRoles().split(',');\n    return loggedIn && roles.includes(neededRole);\n  };\n\n  const makeOptions = (method, addToken, body) => {\n    var opts = {\n      method: method,\n      headers: {\n        \"Content-type\": \"application/json\",\n        'Accept': 'application/json'\n      }\n    };\n\n    if (addToken && loggedIn()) {\n      opts.headers[\"x-access-token\"] = getToken();\n    }\n\n    if (body) {\n      opts.body = JSON.stringify(body);\n    }\n\n    return opts;\n  };\n\n  return {\n    makeOptions,\n    fetchData,\n    setToken,\n    getToken,\n    loggedIn,\n    login,\n    logout,\n    getUserRoles,\n    hasUserAccess\n  };\n};\n\nconst facade = apiFacade();\nexport default facade;","map":{"version":3,"sources":["/Users/mathiasjensen/Dev/School/3rd_semester/CA2-Fall/CA2-Fall-Frontend/src/facade.js"],"names":["URL","handleHttpErrors","res","ok","Promise","reject","status","fullError","json","apiFacade","fetchData","endpoint","updateAction","SetErrorMessage","options","makeOptions","fetch","then","data","catch","err","console","log","e","code","message","login","user","password","setLoggedIn","setErrorMessage","username","setToken","token","localStorage","setItem","getToken","getItem","loggedIn","logout","removeItem","getUserRoles","payloadBase64","split","decodedClaims","JSON","parse","window","atob","roles","hasUserAccess","neededRole","includes","method","addToken","body","opts","headers","stringify","facade"],"mappings":"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","sourcesContent":["const URL = \"http://localhost:8080/CA2_Fall_Backend/\";\n\nfunction handleHttpErrors(res)\n{\n    if (!res.ok)\n    {\n        return Promise.reject({ status: res.status, fullError: res.json() })\n    }\n    return res.json();\n}\n\nlet apiFacade = () =>\n{\n\n    const fetchData = (endpoint, updateAction, SetErrorMessage) =>\n    {\n        const options = makeOptions(\"GET\", true); //True add's the token\n        return fetch(URL + \"/api/\" + endpoint, options)\n            .then(handleHttpErrors)\n            .then((data) => updateAction(data))\n            .catch(err =>\n            {\n                if (err.status)\n                {\n                    console.log(err)\n                    err.fullError.then(e => SetErrorMessage(e.code + \": \" + e.message))\n                }\n                else { SetErrorMessage(\"Network error\"); }\n            })\n    }\n\n    const login = (user, password, setLoggedIn, setErrorMessage) =>\n    {\n        const options = makeOptions(\"POST\", true, { username: user, password: password });\n        return fetch(URL + \"/api/login\", options)\n            .then(handleHttpErrors)\n            .then(res =>\n            {\n                setToken(res.token)\n                setLoggedIn(true);\n                setErrorMessage('Logged in');\n            })\n            .catch((err) =>\n            {\n                if (err.status)\n                {\n                    err.fullError.then((e) => setErrorMessage(e.code + ': ' + e.message));\n                } else\n                {\n                    setErrorMessage('Network error');\n                }\n            });\n    }\n\n    // Security funktionalitet\n\n    const setToken = (token) =>\n    {\n        localStorage.setItem('jwtToken', token)\n    }\n    const getToken = () =>\n    {\n        return localStorage.getItem('jwtToken')\n    }\n    const loggedIn = () =>\n    {\n        const loggedIn = getToken() != null;\n        return loggedIn;\n    }\n    const logout = () =>\n    {\n        localStorage.removeItem(\"jwtToken\");\n    }\n\n    const getUserRoles = () =>\n    {\n        const token = getToken()\n        if (token != null)\n        {\n            const payloadBase64 = getToken().split('.')[1]\n            const decodedClaims = JSON.parse(window.atob(payloadBase64))\n            const roles = decodedClaims.roles\n            return roles\n        } else return \"\"\n    }\n\n    const hasUserAccess = (neededRole, loggedIn) =>\n    {\n        const roles = getUserRoles().split(',')\n        return loggedIn && roles.includes(neededRole)\n    }\n\n    const makeOptions = (method, addToken, body) =>\n    {\n        var opts = {\n            method: method,\n            headers: {\n                \"Content-type\": \"application/json\",\n                'Accept': 'application/json',\n            }\n        }\n        if (addToken && loggedIn())\n        {\n            opts.headers[\"x-access-token\"] = getToken();\n        }\n        if (body)\n        {\n            opts.body = JSON.stringify(body);\n        }\n        return opts;\n    }\n\n    return {\n        makeOptions,\n        fetchData,\n        setToken,\n        getToken,\n        loggedIn,\n        login,\n        logout,\n        getUserRoles,\n        hasUserAccess,\n    }\n\n}\n\nconst facade = apiFacade()\n\nexport default facade"]},"metadata":{},"sourceType":"module"}